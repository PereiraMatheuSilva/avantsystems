generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Fornecedor {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  representante String?
  phonerep      String?
  emailrep      String?
  status        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  produtos Produto[]
}

model Produto {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  fornecedor   Fornecedor @relation(fields: [fornecedorId], references: [id])
  fornecedorId String     @db.ObjectId
  ncm          String?
  description  String?
  price        String
  frete        String
  imposto      String
  lucro        String
  status       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  orcamentoItens OrcamentoItem[]
}

model Licitacao {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?   @unique
  status         Boolean   @default(true)
  valorLicitacao String?
  valorLance     String?
  valorTotalOrc  String?
  dataAbertura   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  orcamentos OrcamentoItem[]
}

model OrcamentoItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  produto       Produto   @relation(fields: [produtoId], references: [id])
  produtoId     String    @db.ObjectId
  licitacao     Licitacao @relation(fields: [licitacaoId], references: [id])
  licitacaoId   String    @db.ObjectId
  quantidade    String
  precoUnitario String
  totalItem     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
